{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/components/api/larekAPI.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/components/model/goodsModel.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/storage/storage.ts","webpack://my-webpack-project/./src/components/base/error.ts","webpack://my-webpack-project/./src/components/base/component.ts","webpack://my-webpack-project/./src/components/function/function.ts","webpack://my-webpack-project/./src/components/view/cardGood.ts","webpack://my-webpack-project/./src/components/view/page.ts","webpack://my-webpack-project/./src/components/model/basketModel.ts","webpack://my-webpack-project/./src/components/model/orderModel.ts","webpack://my-webpack-project/./src/components/view/basket.ts","webpack://my-webpack-project/./src/components/view/order_pay.ts","webpack://my-webpack-project/./src/components/view/order_contacts.ts","webpack://my-webpack-project/./src/components/base/modal.ts","webpack://my-webpack-project/./src/components/view/order_success.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["/**\n * Настройки\n */\nexport const API_URL = `${process.env.API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${process.env.API_ORIGIN}/content/weblarek`;\nexport const settings = {\n    // API\n    api: {\n        // Связки полей модели данных и API\n        /**\n         * Товары\n         * goods[N][0] - имя поля в модели данных\n         * goods[N][1] - имя поля в API\n         */\n        goods: [\n            ['id', 'id'],\n            ['description', 'description'],\n            ['image', 'image'],\n            ['title', 'title'],\n            ['category', 'category'],\n            ['price', 'price'],\n        ],\n        /**\n         * Заказ\n         * order[N][0] - имя поля в модели данных\n         * order[N][1] - имя поля в API\n         */\n        order: [\n            ['payment', 'payment'],\n            ['email', 'email'],\n            ['phone', 'phone'],\n            ['address', 'address'],\n            ['total', 'total'],\n            ['items', 'items'],\n        ],\n    },\n    // События\n    events: {\n        // Модальное окно\n        modal: {\n            open: 'modal:open',\n            close: 'modal:close',\n        },\n        // Карта товара\n        card: {\n            goodsAllChange: 'goods:allChange',\n            cardDetail: 'card:showDetail',\n            cardBasket: 'card:editBasket', // Изменить корзину из детального просмотра\n        },\n        // Корзина\n        basket: {\n            changeBasket: 'basket:change',\n            goodDelete: 'basket:delete', // Удалён товар из корзины\n        },\n        // Заказ\n        order: {\n            makeOrder: 'order:make',\n            changeValueOrder: 'order:changeValueOrder',\n            changeOrder: 'order:changePay',\n            changeValueContacts: 'order:changeValueContacts',\n            changeContacts: 'order:changeContacts',\n            sendedOrder: 'order:sendedOrder',\n            closeOrder: 'order:closeOrder', // Событие \"Закрыть окно заказа\"\n        },\n        // Страница\n        page: {\n            showBasket: 'page:showBasket', // Событие \"А покажи ка мне корзину\"\n        },\n    },\n    keysClose: [\n        'Escape',\n        'F10',\n    ],\n    storage: {\n        active: true, // Сохранять ли в локальное хранилище?\n    },\n    // Элементы вёрстки\n    elements: {\n        // Страница\n        page: {\n            pageContent: '.page__wrapper',\n            listGoods: '.gallery',\n            basketCount: '.header__basket-counter',\n            basketButton: '.header__basket', // Кнопка корзины, при нажатии открывается корзина\n        },\n        // Модальное окно\n        modal: {\n            modalContainer: '#modal-container',\n            modalContent: '.modal__content',\n            modalActive: 'modal_active',\n            closeButton: '.modal__close',\n            basketButton: '.card__button', // Кнопка \"В корзину\"\n        },\n        // Карта товара\n        card: {\n            templateCatalog: '#card-catalog',\n            templateDetails: '#card-preview',\n            templateBasket: '#card-basket',\n            cardBody: '.gallery__item',\n            buttonDelete: '.basket__item-delete',\n            number: '.basket__item-index',\n            category: '.card__category',\n            title: '.card__title',\n            description: '.card__text',\n            image: '.card__image',\n            price: '.card__price',\n            catClass: new Map([\n                ['софт-скил', 'card__category_soft'],\n                ['другое', 'card__category_other'],\n                ['дополнительное', 'card__category_additional'],\n                ['кнопка', 'card__category_button'],\n                ['хард-скил', 'card__category_hard'],\n            ]),\n        },\n        // Корзина\n        basket: {\n            template: '#basket',\n            templateList: '.basket__list',\n            totalSum: '.basket__price',\n            buttonOrder: '.basket__button', // Кнопка \"Оформить\"\n        },\n        // Заказ\n        order: {\n            // Первая страница\n            templatePageOrder: '#order',\n            buttonClassActive: 'button_alt-active',\n            defaultPay: 'offline',\n            buttonCard: '[name=\"card\"]',\n            buttonCash: '[name=\"cash\"]',\n            inputAddress: '[name=\"address\"]',\n            buttonOrder: '.order__button',\n            errorOrder: '.form__errors',\n            // Вторая страница\n            templatePageContacts: '#contacts',\n            inputEMail: '[name=\"email\"]',\n            // Шаблон для проверки почты\n            patternEMail: /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/iu,\n            inputPhone: '[name=\"phone\"]',\n            // Шаблон для проверки телефона\n            patternPhone: /(?:\\+|\\d)[\\d\\-\\(\\) ]{9,}\\d/g,\n            buttonContacts: '.contacts__button',\n            errorContacts: '.form__errors',\n            // Третья страница\n            templatePageSuccess: '#success',\n            totalSum: '.order-success__description',\n            buttonSuccess: '.order-success__close', // Кнопка \"За новыми покупками!\"\n        },\n    },\n    // Падежометр\n    case: {\n        splitNumber: /(\\d)(?=(\\d{3})+([^\\d]|$))/g,\n        synapse: new Map([\n            [0, \"Бесценно\"],\n            [1, \"синапс\"],\n            [2, \"синапса\"],\n            [3, \"синапсов\"],\n        ]),\n        piece: new Map([\n            [0, \"Нет\"],\n            [1, \"штука\"],\n            [2, \"штуки\"],\n            [3, \"штук\"],\n        ]),\n    }\n};\n","/**\n * Класс API\n */\nimport { Api } from \"../base/api\";\nexport class LarekAPI extends Api {\n    getGoods() {\n        return this.get('/product');\n    }\n    sendOrder(order) {\n        return this.post('/order', order);\n    }\n}\n","export class Api {\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}))\n        };\n    }\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response.json()\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then(this.handleResponse);\n    }\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then(this.handleResponse);\n    }\n}\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach(callback => callback({\n                    eventName,\n                    data\n                }));\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","/**\n * Модуль описывает модель данных \"ТоварЫ\"\n */\nimport { settings } from \"../../utils/constants\";\n/**\n * Класс для товара\n */\nexport class GoodsModel {\n    constructor(events) {\n        this.events = events;\n        this.events = events;\n        this._goods = new Map();\n    }\n    /**\n     * Сеттер для списка товаров\n     */\n    set goods(data) {\n        this.clear();\n        data.forEach(good => {\n            this._goods.set(good.id, good);\n        });\n        this.events.emit(settings.events.card.goodsAllChange);\n    }\n    /**\n     * Геттер для списка товаров\n     */\n    get goods() {\n        return new Map(this._goods);\n    }\n    /**\n     * Очистить список товаров\n     */\n    clear() {\n        this._goods.clear();\n    }\n    /**\n     * Отдать один товар\n     */\n    getGood(id) {\n        return this._goods.get(id);\n    }\n    /**\n     * Записать один товар\n     */\n    setGood(good) {\n        this._goods.set(good.id, good);\n    }\n}\n","export function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\n","/**\n * Модуль для хранения данных в локальном хранилище\n */\nimport { isEmpty } from \"../../utils/utils\";\n/**\n * Класс для хранилища\n *\n * @class Storage\n *   @property {string} keyBasket Ключ данных корзины\n *   @property {string} keyOrder Ключ данных покупателя\n */\nclass LarekStorage {\n    /**\n     * Прочитать корзину\n     * !!! JSON.parse не умеет работать с Map\n     */\n    loadBasket() {\n        const saveBasket = JSON.parse(localStorage.getItem(LarekStorage.keyBasket));\n        if (isEmpty(saveBasket)) {\n            return null;\n        }\n        else {\n            return {\n                editDate: saveBasket.editDate,\n                goods: new Map(saveBasket.goods),\n            };\n        }\n    }\n    /**\n     * Записать корзину\n     !!! JSON.stringify не умеет работать с Map\n     */\n    saveBasket(basket) {\n        const saveBasket = {\n            editDate: basket.editDate,\n            goods: Array.from(basket.goods),\n        };\n        localStorage.setItem(LarekStorage.keyBasket, JSON.stringify(saveBasket));\n    }\n    /**\n     * Очистить корзину\n     */\n    clearBasket() {\n        localStorage.removeItem(LarekStorage.keyBasket);\n    }\n    /**\n     * Прочитать заказ\n     */\n    loadOrder() {\n        return JSON.parse(localStorage.getItem(LarekStorage.keyOrder));\n    }\n    /**\n     * записать заказ\n     */\n    saveOrder(order) {\n        localStorage.setItem(LarekStorage.keyOrder, JSON.stringify(order));\n    }\n    /**\n     * Очистить заказ\n     */\n    clearOrder() {\n        localStorage.removeItem(LarekStorage.keyOrder);\n    }\n}\nLarekStorage.keyBasket = \"larekBasket\";\nLarekStorage.keyOrder = \"larekOrder\";\nexport { LarekStorage };\n","/**\n * Работа с ошибками приложения\n */\n/**\n * Показать ошибку\n */\nexport function showError(title, message) {\n    console.log(`${title} -> ${message}`);\n}\n","/**\n * Базовый компонент\n */\nexport class Component {\n    constructor(container) {\n        this.container = container;\n        // Учитывайте что код в конструкторе исполняется ДО всех объявлений в дочернем классе\n    }\n    // Инструментарий для работы с DOM в дочерних компонентах\n    // Переключить класс\n    toggleClass(element, className, force) {\n        element.classList.toggle(className, force);\n    }\n    // Установить текстовое содержимое\n    setText(element, value) {\n        if (element) {\n            element.textContent = String(value);\n        }\n    }\n    // Сменить статус блокировки\n    setDisabled(element, state) {\n        if (element) {\n            if (state)\n                element.setAttribute('disabled', 'disabled');\n            else\n                element.removeAttribute('disabled');\n        }\n    }\n    // Скрыть\n    setHidden(element) {\n        element.style.display = 'none';\n    }\n    // Показать\n    setVisible(element) {\n        element.style.removeProperty('display');\n    }\n    // Установить изображение с альтернативным текстом\n    setImage(element, src, alt) {\n        if (element) {\n            element.src = src;\n            if (alt) {\n                element.alt = alt;\n            }\n        }\n    }\n    // Вернуть корневой DOM-элемент\n    render(data) {\n        Object.assign(this, data !== null && data !== void 0 ? data : {});\n        return this.container;\n    }\n}\n","/**\n * Модуль для функций\n */\nimport { isEmpty } from \"../../utils/utils\";\nimport { settings } from \"../../utils/constants\";\n/**\n * Падежометр для чисел прописью в синапсах, штуках и т.д.\n * Настройки см. в settings.case\n * ... надо будет в тугриках, сделаем и в тугриках\n */\nexport function priceToString(choice, value) {\n    let stringPrice;\n    if (isEmpty(value)) {\n        stringPrice = `0 ${choice.get(3)}`;\n    }\n    else {\n        stringPrice = value.toString();\n        // Разбить на разряды\n        stringPrice = stringPrice.replace(settings.case.splitNumber, \"$1 \");\n        // Падежометр\n        const remains = value % 10;\n        let text;\n        if (value > 10 && value < 15)\n            text = choice.get(3);\n        else if (remains === 1)\n            text = choice.get(1);\n        else if (remains > 1 && remains < 5)\n            text = choice.get(2);\n        else\n            text = choice.get(3);\n        stringPrice = `${stringPrice} ${text}`;\n    }\n    return stringPrice;\n}\n","/**\n * Модуль описывает отображение \"ТоварЫ\"\n */\nimport { ensureElement, isEmpty } from \"../../utils/utils\";\nimport { Component } from \"../base/component\";\nimport { CDN_URL, settings } from \"../../utils/constants\";\nimport { priceToString } from \"../function/function\";\n/**\n * Класс для отображения карты товара\n */\nexport class CardGood extends Component {\n    constructor(container, events) {\n        super(container);\n        this.events = events;\n        this.elementCategory = container.querySelector(settings.elements.card.category);\n        this.elementImage = container.querySelector(settings.elements.card.image);\n        this.elementNumber = container.querySelector(settings.elements.card.number);\n        this.elementTitle = ensureElement(settings.elements.card.title, this.container);\n        this.elementDescription = container.querySelector(settings.elements.card.description);\n        this.elementPrice = ensureElement(settings.elements.card.price, this.container);\n        this.basketButton = container.querySelector(settings.elements.modal.basketButton);\n        this.basketDelete = container.querySelector(settings.elements.card.buttonDelete);\n        // Слушатели и доп элементы\n        // Для карты в каталоге\n        if (!isEmpty(this.elementImage)) {\n            this.container.addEventListener('click', () => this.events.emit(settings.events.card.cardDetail, { id: this.goodId }));\n        }\n        // Для карты в детальном просмотре\n        if (!isEmpty(this.basketButton)) {\n            this.basketButton.addEventListener('click', () => this.events.emit(settings.events.card.cardBasket, { id: this.goodId }));\n        }\n        // Для карты в корзине\n        if (!isEmpty(this.basketDelete)) {\n            this.basketDelete.addEventListener('click', () => this.events.emit(settings.events.basket.goodDelete, { id: this.goodId }));\n        }\n    }\n    /**\n     * Сеттер для номера карты\n     */\n    set number(value) {\n        this.setText(this.elementNumber, value);\n    }\n    /**\n     * Сеттер для категории\n     */\n    set category(value) {\n        this.setText(this.elementCategory, value);\n        // Удалить что было и добавить нужный\n        settings.elements.card.catClass.forEach((classCategory, key) => {\n            if (key === value) {\n                this.toggleClass(this.elementCategory, classCategory, true);\n            }\n            else {\n                this.toggleClass(this.elementCategory, classCategory, false);\n            }\n        });\n    }\n    /**\n     * Сеттер для названия\n     */\n    set title(value) {\n        this.setText(this.elementTitle, value);\n    }\n    /**\n     * Геттер для названия\n     */\n    get title() {\n        return this.elementTitle.textContent;\n    }\n    /**\n     * Сеттер для описания\n     */\n    set description(value) {\n        this.setText(this.elementDescription, value);\n    }\n    /**\n     * Геттер для названия\n     */\n    get description() {\n        return this.elementDescription.textContent;\n    }\n    /**\n     * Сеттер для изображения\n     */\n    set image(value) {\n        this.setImage(this.elementImage, CDN_URL + value.replace(\".svg\", \".png\"), this.title);\n    }\n    /**\n     * Сеттер для номера цены\n     */\n    set price(value) {\n        // Если цены нет, то \"Бесценно\"\n        this.setText(this.elementPrice, isEmpty(value) ? settings.case.synapse.get(0) : priceToString(settings.case.synapse, value));\n    }\n    /**\n     * Сеттер для id\n     */\n    set id(value) {\n        this.goodId = value;\n    }\n    /**\n     * Сеттер для кнопки\n     */\n    set buttonText(value) {\n        this.setText(this.basketButton, value);\n    }\n    /**\n     * Сеттер для видимости кнопки\n     */\n    set buttonDisabled(value) {\n        this.setDisabled(this.basketButton, value);\n    }\n}\n","/**\n * Страница приложения\n */\nimport { ensureElement } from \"../../utils/utils\";\nimport { Component } from \"../base/component\";\nimport { settings } from \"../../utils/constants\";\nexport class Page extends Component {\n    constructor(container, events) {\n        super(container);\n        this.events = events;\n        this.galleryCards = ensureElement(settings.elements.page.listGoods, this.container);\n        this.elementBasketCount = ensureElement(settings.elements.page.basketCount, this.container);\n        this.elementBasketButton = ensureElement(settings.elements.page.basketButton);\n        // Слушатели\n        this.elementBasketButton.addEventListener('click', () => events.emit(settings.events.page.showBasket));\n    }\n    set goodsList(itemsGoods) {\n        this.galleryCards.replaceChildren(...itemsGoods);\n    }\n    set basketCount(value) {\n        this.setText(this.elementBasketCount, value.toString());\n    }\n}\n","/**\n * Модуль описывает модель данных \"Корзина\"\n */\nimport { isEmpty } from \"../../utils/utils\";\nimport { settings } from \"../../utils/constants\";\n/**\n * Класс для корзины\n */\nexport class BasketModel {\n    constructor(events) {\n        this.events = events;\n        this._goods = new Map();\n    }\n    /**\n     * Сеттер для даты последнего редактирования корзины\n     */\n    set editDate(date) {\n        this._editDate = date;\n    }\n    /**\n     * Геттер для даты последнего редактирования корзины\n     */\n    get editDate() {\n        return this._editDate;\n    }\n    /**\n     * Факт редактирования корзины\n     */\n    edit() {\n        if (isEmpty(this._editDate))\n            this._editDate = new Date();\n    }\n    /**\n     * Очистка корзины\n     */\n    clear() {\n        this._goods.clear();\n    }\n    /**\n     * Сеттер для списка товаров\n     */\n    get goods() {\n        return new Map(this._goods);\n    }\n    /**\n     * Геттер для списка товаров\n     */\n    set goods(data) {\n        this.clear();\n        if (!isEmpty(data)) {\n            this._goods = new Map(data);\n        }\n        this.events.emit(settings.events.basket.changeBasket);\n    }\n    /**\n     * Добавить товар в корзину\n     */\n    addGood(id) {\n        // Если есть, то просто увеличить количество\n        const count = this.isBasket(id) ? this._goods.get(id) + 1 : 1;\n        this._goods.set(id, count);\n        this.edit();\n        this.events.emit(settings.events.basket.changeBasket);\n    }\n    /**\n     * Удалить товар из корзины\n     */\n    deleteGood(id) {\n        this._goods.delete(id);\n        if (this.getCount() === 0)\n            this._editDate = null;\n        this.events.emit(settings.events.basket.changeBasket);\n    }\n    /**\n     * Получить количество товаров в корзине\n     */\n    getCount() {\n        return this._goods.size;\n    }\n    /**\n     * Товар в корзине?\n     */\n    isBasket(id) {\n        return this._goods.has(id);\n    }\n    /**\n     * Посчитать стоимость товаров в корзине\n     */\n    calcTotal(Goods) {\n        let total = 0;\n        this._goods.forEach((value, key) => {\n            total += this.calcGood(Goods.getGood(key));\n        });\n        return total;\n    }\n    /**\n     * Посчитать стоимость одного товара в корзине\n     */\n    calcGood(Good) {\n        // Цена * Количество\n        return Good.price * this._goods.get(Good.id);\n    }\n}\n","/**\n * Модуль описывает модель данных \"Заказ\"\n */\nimport { settings } from \"../../utils/constants\";\nimport { isEmpty } from \"../../utils/utils\";\n/**\n * Класс для заказа\n */\nexport class OrderModel {\n    constructor(events) {\n        this.events = events;\n        // тип оплаты\n        this._payment = settings.elements.order.defaultPay;\n        this._email = ''; // почта\n        this._phone = ''; // телефон\n        this._address = ''; // адрес\n        this.events = events;\n    }\n    /**\n     * Сеттер для типа оплаты\n     */\n    set payment(value) {\n        this._payment = value;\n    }\n    /**\n     * Геттер для типа оплаты\n     */\n    get payment() {\n        return this._payment;\n    }\n    /**\n     * Сеттер для почты\n     */\n    set email(value) {\n        this._email = value;\n    }\n    /**\n     * Геттер для почты\n     */\n    get email() {\n        return this._email;\n    }\n    /**\n     * Сеттер для телефона\n     */\n    set phone(value) {\n        this._phone = value;\n    }\n    /**\n     * Геттер для телефона\n     */\n    get phone() {\n        return this._phone;\n    }\n    /**\n     * Сеттер для адреса\n     */\n    set address(value) {\n        this._address = value;\n    }\n    /**\n     * Геттер для адреса\n     */\n    get address() {\n        return this._address;\n    }\n    /**\n     * Проверка введённых данных\n     */\n    validation(data) {\n        let textError = '';\n        // Тип оплаты\n        if (!isEmpty(data.payment) && (data.payment === ''))\n            textError = textError + 'Необходимо указать тип оплаты. ';\n        // Адрес\n        if (!isEmpty(data.address) && (data.address === ''))\n            textError = textError + 'Необходимо указать адрес. ';\n        // Почта\n        if (!isEmpty(data.email)) {\n            if (data.email === '')\n                textError = textError + 'Необходимо указать Email. ';\n            else if (!settings.elements.order.patternEMail.test(data.email))\n                textError = textError + 'Укажите действующий Email. ';\n        }\n        // Телефон\n        if (!isEmpty(data.phone)) {\n            if (data.phone === '')\n                textError = textError + 'Необходимо указать телефон. ';\n            else if (!settings.elements.order.patternPhone.test(data.phone))\n                textError = textError + 'Укажите действующий телефон. ';\n        }\n        return textError;\n    }\n}\n","/**\n * Модуль описывает отображение \"Корзина\"\n */\nimport { Component } from \"../base/component\";\nimport { createElement, ensureElement } from \"../../utils/utils\";\nimport { settings } from \"../../utils/constants\";\n/**\n * Класс для отображения корзины\n */\nexport class Basket extends Component {\n    constructor(container, events) {\n        super(container);\n        this.events = events;\n        this.galleryCards = ensureElement(settings.elements.basket.templateList, this.container);\n        this.basketSum = ensureElement(settings.elements.basket.totalSum, this.container);\n        this.basketButton = ensureElement(settings.elements.basket.buttonOrder, this.container);\n        // Слушатель кнопки \"Оформить\"\n        this.basketButton.addEventListener('click', () => this.events.emit(settings.events.order.makeOrder));\n    }\n    /**\n     * Сеттер для записи \"Корзина пуста\"\n     */\n    set basketEmpty(text) {\n        const goodsEmpty = createElement('p', {\n            textContent: 'Корзина пуста',\n        });\n        this.setDisabled(this.basketButton, true);\n        this.galleryCards.replaceChildren(goodsEmpty);\n    }\n    /**\n     * Сеттер для записи товаров в корзину\n     */\n    set basketList(itemsGoods) {\n        this.setDisabled(this.basketButton, false);\n        this.galleryCards.replaceChildren(...itemsGoods);\n    }\n    /**\n     * Сеттер для установки суммы корзины\n     */\n    set totalSum(value) {\n        this.setText(this.basketSum, value);\n    }\n}\n","/**\n * Модуль описывает представление \"Заказ. Первая страница\"\n */\nimport { Component } from \"../base/component\";\nimport { settings } from \"../../utils/constants\";\nimport { isEmpty, ensureElement } from \"../../utils/utils\";\n/**\n * Класс для отображения первой страницы оформления заказа\n */\nexport class OrderViewPay extends Component {\n    constructor(container, events) {\n        super(container);\n        this.events = events;\n        this.buttonCard = ensureElement(settings.elements.order.buttonCard, container);\n        this.buttonCash = ensureElement(settings.elements.order.buttonCash, container);\n        this.inputAddress = ensureElement(settings.elements.order.inputAddress, container);\n        this.buttonOrder = ensureElement(settings.elements.order.buttonOrder, container);\n        this.errorOrder = ensureElement(settings.elements.order.errorOrder, container);\n        // Слушатели\n        this.buttonCard.addEventListener('click', () => this.render({ payment: 'online' }));\n        this.buttonCash.addEventListener('click', () => this.render({ payment: 'offline' }));\n        // Кнопка \"Далее\"\n        container.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this.events.emit(settings.events.order.changeOrder, {\n                payment: this.buttonCard.classList.contains(settings.elements.order.buttonClassActive) ? 'online' : 'offline',\n                address: this.inputAddress.value,\n            });\n        });\n        // Изменение данных\n        const func = this.changeData.bind(this);\n        this.buttonCash.addEventListener('click', func);\n        this.buttonCard.addEventListener('click', func);\n        this.inputAddress.addEventListener('input', func);\n    }\n    set payment(value) {\n        if (isEmpty(value))\n            return;\n        const force = value === 'online';\n        this.toggleClass(this.buttonCard, settings.elements.order.buttonClassActive, force);\n        this.toggleClass(this.buttonCash, settings.elements.order.buttonClassActive, !force);\n    }\n    set address(value) {\n        if (isEmpty(this.inputAddress))\n            return;\n        this.inputAddress.value = value;\n    }\n    set errorValidation(value) {\n        this.setText(this.errorOrder, value);\n        this.setDisabled(this.buttonOrder, value !== '');\n    }\n    /**\n     * Изменение данных на форме\n     */\n    changeData() {\n        this.events.emit(settings.events.order.changeValueOrder, {\n            payment: this.buttonCard.classList.contains(settings.elements.order.buttonClassActive),\n            address: this.inputAddress.value,\n        });\n    }\n}\n","/**\n * Модуль описывает представление \"Заказ. Вторая страница\"\n */\nimport { Component } from \"../base/component\";\nimport { settings } from \"../../utils/constants\";\nimport { ensureElement } from \"../../utils/utils\";\n/**\n * Класс для отображения второй страницы оформления заказа\n */\nexport class OrderViewContacts extends Component {\n    constructor(container, events) {\n        super(container);\n        this.events = events;\n        this.inputEMail = ensureElement(settings.elements.order.inputEMail, container);\n        this.inputPhone = ensureElement(settings.elements.order.inputPhone, container);\n        this.buttonPay = ensureElement(settings.elements.order.buttonContacts, container);\n        this.errorContacts = ensureElement(settings.elements.order.errorContacts, container);\n        // Слушатели\n        // Кнопка \"Оплатить\"\n        container.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this.events.emit(settings.events.order.changeContacts, {\n                email: this.inputEMail.value,\n                phone: this.inputPhone.value,\n            });\n        });\n        // Изменение данных\n        const func = this.changeData.bind(this);\n        this.inputEMail.addEventListener('input', func);\n        this.inputPhone.addEventListener('input', func);\n    }\n    set email(value) {\n        this.inputEMail.value = value;\n    }\n    set phone(value) {\n        this.inputPhone.value = value;\n    }\n    set errorValidation(value) {\n        this.setText(this.errorContacts, value);\n        this.setDisabled(this.buttonPay, value !== '');\n    }\n    /**\n     * Изменение данных на форме\n     */\n    changeData() {\n        this.events.emit(settings.events.order.changeValueContacts, {\n            email: this.inputEMail.value,\n            phone: this.inputPhone.value,\n        });\n    }\n}\n","/**\n * Класс для модальных окон\n */\nimport { Component } from \"./component\";\nimport { ensureElement, isEmpty } from \"../../utils/utils\";\nexport class Modal extends Component {\n    constructor(container, events, elements, keys) {\n        super(container);\n        this.events = events;\n        // Настройка на разметку по умолчанию\n        this._elements = {\n            modalContent: '.modal__content',\n            modalActive: 'modal_active',\n            closeButton: '.modal__close', // Кнопка закрытия\n        };\n        // Настройка на клавиши по умолчанию\n        this._keys = [\n            'Escape',\n        ];\n        this.funcKeyDown = this.closeWindowKey.bind(this);\n        // Настройка на разметку\n        if (!isEmpty(elements)) {\n            this._elements = elements;\n        }\n        // Настройка на клавиши для закрытия окна\n        if (!isEmpty(keys)) {\n            this._keys = keys;\n        }\n        this._closeButton = ensureElement(this._elements.closeButton, container);\n        this._content = ensureElement(this._elements.modalContent, container);\n        this._closeButton.addEventListener('click', this.close.bind(this));\n        this.container.addEventListener('click', this.close.bind(this));\n        this._content.addEventListener('click', (event) => event.stopPropagation());\n    }\n    set content(value) {\n        this._content.replaceChildren(value);\n    }\n    open() {\n        this.container.classList.add(this._elements.modalActive);\n        this.events.emit('modal:open');\n        // Для снятия открытого окна по клавише\n        document.addEventListener('keydown', this.funcKeyDown);\n    }\n    close() {\n        this.container.classList.remove(this._elements.modalActive);\n        this.content = null;\n        this.events.emit('modal:close');\n        // Для снятия открытого окна по клавише\n        document.removeEventListener('keydown', this.funcKeyDown);\n    }\n    render(data) {\n        super.render(data);\n        this.open();\n        return this.container;\n    }\n    /**\n     * Закрывашка для всех окон по клавише\n     */\n    closeWindowKey(event) {\n        // Поискать клавишу в списке\n        if (!(this._keys.findIndex(function (element) {\n            return element === event.key;\n        }) !== -1))\n            return;\n        this.close();\n    }\n}\n","/**\n * Модуль описывает представление \"Заказ. Заказ оформлен\"\n */\nimport { Component } from \"../base/component\";\nimport { settings } from \"../../utils/constants\";\nimport { ensureElement } from \"../../utils/utils\";\nimport { priceToString } from \"../function/function\";\n/**\n * Класс для отображения последней страницы оформления заказа\n */\nexport class OrderViewSuccess extends Component {\n    constructor(container, events) {\n        super(container);\n        this.events = events;\n        this.totalSumOff = ensureElement(settings.elements.order.totalSum, container);\n        this.buttonSuccess = ensureElement(settings.elements.order.buttonSuccess, container);\n        // Слушатели\n        this.buttonSuccess.addEventListener('click', () => this.events.emit(settings.events.order.closeOrder));\n    }\n    set total(value) {\n        this.setText(this.totalSumOff, `Списано ${priceToString(settings.case.synapse, value)}`);\n    }\n}\n","/**\n * Основной модуль приложения\n */\nimport './scss/styles.scss';\nimport { API_URL, settings } from \"./utils/constants\";\nimport { LarekAPI } from \"./components/api/larekAPI\";\nimport { EventEmitter } from \"./components/base/events\";\nimport { GoodsModel } from \"./components/model/goodsModel\";\nimport { LarekStorage } from \"./components/storage/storage\";\nimport { showError } from \"./components/base/error\";\nimport { CardGood } from \"./components/view/cardGood\";\nimport { cloneTemplate, ensureElement, isEmpty } from \"./utils/utils\";\nimport { Page } from \"./components/view/page\";\nimport { BasketModel } from \"./components/model/basketModel\";\nimport { OrderModel } from \"./components/model/orderModel\";\nimport { priceToString } from \"./components/function/function\";\nimport { Basket } from \"./components/view/basket\";\nimport { OrderViewPay } from \"./components/view/order_pay\";\nimport { OrderViewContacts } from './components/view/order_contacts';\nimport { Modal } from \"./components/base/modal\";\nimport { OrderViewSuccess } from \"./components/view/order_success\";\n/*\n// Тесты\nimport {startTests} from \"./test/test\";\nstartTests();\nthrow '';\n*/\n// Заготовки\n// Модальное окно\nconst elementModal = ensureElement(settings.elements.modal.modalContainer);\n// Под карту\n// 1. В каталоге\nconst templateCatalog = ensureElement(settings.elements.card.templateCatalog);\n// 2. В просмотре товара\nconst templateDetails = ensureElement(settings.elements.card.templateDetails);\n// 3. В корзине\nconst templateBasket = ensureElement(settings.elements.card.templateBasket);\n// Корзина\nconst cloneBasketList = cloneTemplate(ensureElement(settings.elements.basket.template));\n// Первая страница заказа\nconst clonePageOrder = cloneTemplate(ensureElement(settings.elements.order.templatePageOrder));\n// Вторая страница заказа\nconst clonePageContacts = cloneTemplate(ensureElement(settings.elements.order.templatePageContacts));\n// Третья страница заказа\nconst clonePageSuccess = cloneTemplate(ensureElement(settings.elements.order.templatePageSuccess));\n// Всё нужное\nconst events = new EventEmitter(); // Брокер событий;\nconst storage = new LarekStorage(); // Хранилище\nconst apiLarek = new LarekAPI(API_URL); // Api\n// Модели\nconst goodsModel = new GoodsModel(events); // Список товаров\nconst basketModel = new BasketModel(events); // Корзина\nconst orderModel = new OrderModel(events); // Параметры заказа\n// Отображения\nconst modalWindow = new Modal(elementModal, events, settings.elements.modal, settings.keysClose); // Модальное окно\nconst basketView = new Basket(cloneBasketList, events); // Отображение корзины\nconst orderPay = new OrderViewPay(clonePageOrder, events); // Первая страница заказа\nconst orderContacts = new OrderViewContacts(clonePageContacts, events); // Вторая страница заказа\nconst orderSuccess = new OrderViewSuccess(clonePageSuccess, events); // Третья страница заказа\n// Страница\nconst page = new Page(ensureElement(settings.elements.page.pageContent), events);\n// Функции\n/**\n * Перестроить корзину\n */\nfunction rebuildBasket() {\n    let count = 0;\n    const goodsHTMLArray = Array.from(basketModel.goods).map(item => {\n        const good = goodsModel.getGood(item[0]);\n        const countInBasket = item[1]; // Количество в корзине\n        count++;\n        return new CardGood(cloneTemplate(templateBasket), events)\n            .render({\n            number: count,\n            id: good.id,\n            // Название (сколько штук)\n            title: `${good.title} (${priceToString(settings.case.piece, countInBasket)})`,\n            price: basketModel.calcGood(good),\n        });\n    });\n    let basket;\n    if (count === 0) { // В корзине ничего нет\n        basket = basketView.render({\n            basketEmpty: 'Корзина пуста',\n            totalSum: priceToString(settings.case.synapse, 0),\n        });\n        //page.contentModal.replaceChildren(basket);\n    }\n    else { // В корзине есть товары\n        basket = basketView.render({\n            basketList: goodsHTMLArray,\n            totalSum: priceToString(settings.case.synapse, basketModel.calcTotal(goodsModel)),\n        });\n        //page.contentModal.replaceChildren(basket);\n    }\n    return basket;\n}\n// Загрузить товары из API\napiLarek.getGoods()\n    .then(data => {\n    /* Переписать из API в свою структуру\n       Структуры могут не совпадать\n       См. настройку settings.api.goods\n     */\n    const listGoods = new Map();\n    data.items.forEach((item) => {\n        const good = {};\n        settings.api.goods.forEach((link) => {\n            good[link[0]] = item[link[1]];\n        });\n        listGoods.set(good.id, good);\n    });\n    goodsModel.goods = listGoods;\n    // Теперь можно загрузить корзину из локального хранилища, если там чего-то есть\n    if (settings.storage.active) {\n        // Корзина\n        const basketStorage = storage.loadBasket();\n        if (!isEmpty(basketStorage)) {\n            basketModel.editDate = basketStorage.editDate;\n            // Проверить товары из корзины, А вдруг уже нет в каталоге?\n            const tempGoods = new Map;\n            basketStorage.goods.forEach((count, id) => {\n                if (!isEmpty(goodsModel.getGood(id))) {\n                    // Товар в каталоге есть! Можно оставить в корзине.\n                    tempGoods.set(id, count);\n                }\n            });\n            basketModel.goods = tempGoods;\n        }\n    }\n})\n    .catch(err => {\n    showError('Загрузка товаров', err.message);\n});\n// Теперь можно загрузить параметры заказа из локального хранилища, если там чего-то есть\nif (settings.storage.active) {\n    // Параметры заказа\n    const orderStorage = storage.loadOrder();\n    if (!isEmpty(orderStorage)) {\n        orderModel.payment = orderStorage.payment;\n        orderModel.email = orderStorage.email;\n        orderModel.phone = orderStorage.phone;\n        orderModel.address = orderStorage.address;\n    }\n}\n// Обработка сообщений\n// Сообщение -> Изменение списка товаров в каталоге\nevents.on(settings.events.card.goodsAllChange, () => {\n    const goodsHTMLArray = Array.from(goodsModel.goods).map(item => {\n        return new CardGood(cloneTemplate(templateCatalog), events).render(item[1]);\n    });\n    page.render({\n        goodsList: goodsHTMLArray,\n        basketCount: basketModel.getCount(),\n    });\n});\n// Сообщение -> Клик на карте\nevents.on(settings.events.card.cardDetail, (data) => {\n    // Показ карты товара\n    const good = goodsModel.getGood(data.id);\n    let captionButton = 'Добавить в корзину';\n    let disabledButton = false;\n    if (isEmpty(good.price)) {\n        captionButton = 'Нет цены';\n        disabledButton = true;\n    }\n    modalWindow.render({\n        content: new CardGood(cloneTemplate(templateDetails), events)\n            .render(Object.assign(Object.assign({}, good), { buttonText: captionButton, buttonDisabled: disabledButton })),\n    });\n});\n// Сообщение -> Клик на кнопке в карте товара \"Добавить в корзину\"\nevents.on(settings.events.card.cardBasket, (data) => {\n    if (isEmpty(data))\n        return;\n    basketModel.addGood(data.id);\n    page.render({\n        basketCount: basketModel.getCount(),\n    });\n});\n// Сообщение -> Изменена корзина\nevents.on(settings.events.basket.changeBasket, () => {\n    // Сохраниться в локальное хранилище\n    if (settings.storage.active) {\n        storage.saveBasket({\n            editDate: basketModel.editDate,\n            goods: basketModel.goods, // список товаров в корзине\n        });\n    }\n    page.render({\n        basketCount: basketModel.getCount(),\n    });\n});\n// Сообщение -> Клик на кнопке \"Покажи мне корзину\"\nevents.on(settings.events.page.showBasket, () => {\n    modalWindow.render({\n        content: rebuildBasket(),\n    });\n});\n// Сообщение -> Клик на кнопке \"Удалить\" в корзине\nevents.on(settings.events.basket.goodDelete, (data) => {\n    basketModel.deleteGood(data.id);\n    modalWindow.render({\n        content: rebuildBasket(),\n    });\n});\n// Сообщение -> Клик на кнопке \"Оформить\" в корзине\nevents.on(settings.events.order.makeOrder, () => {\n    const textError = orderModel.validation({\n        payment: orderModel.payment,\n        address: orderModel.address,\n    });\n    modalWindow.render({\n        content: orderPay.render({\n            payment: orderModel.payment,\n            address: orderModel.address,\n            errorValidation: textError,\n        }),\n    });\n});\n// Сообщение -> Изменение данных на первой странице заказа\nevents.on(settings.events.order.changeValueOrder, (data) => {\n    const textError = orderModel.validation(data);\n    orderPay.render({\n        errorValidation: textError,\n    });\n});\n// Сообщение -> Изменение данных на второй странице заказа\nevents.on(settings.events.order.changeValueContacts, (data) => {\n    const textError = orderModel.validation(data);\n    orderContacts.render({\n        errorValidation: textError,\n    });\n});\n// Сообщение -> Клик на кнопке \"Далее\" в заказе\nevents.on(settings.events.order.changeOrder, (data) => {\n    orderModel.address = data.address;\n    orderModel.payment = data.payment;\n    const textError = orderModel.validation({\n        email: orderModel.email,\n        phone: orderModel.phone,\n    });\n    modalWindow.render({\n        content: orderContacts.render({\n            email: orderModel.email,\n            phone: orderModel.phone,\n            errorValidation: textError,\n        }),\n    });\n});\n// Сообщение -> Клик на кнопке \"Оплатить\" в заказе\nevents.on(settings.events.order.changeContacts, (data) => {\n    orderModel.email = data.email;\n    orderModel.phone = data.phone;\n    const totalSum = basketModel.calcTotal(goodsModel);\n    /* Переписать из своей структуры в API\n       Структуры могут не совпадать\n       См. настройку settings.api.order\n     */\n    const orderSend = {}; // Для отправки в API\n    const orderStorage = {}; // Для сохранения в локальное хранилище\n    settings.api.order.forEach((item) => {\n        const keyModel = item[0];\n        const keyApi = item[1];\n        if (keyModel === 'total') {\n            orderSend[keyApi] = totalSum;\n        }\n        else if (keyModel === 'items') {\n            orderSend[keyApi] = [];\n            // Развалить количество на отдельные строки\n            basketModel.goods.forEach((count, id) => {\n                for (let num = 0; num < count; num++) {\n                    orderSend[keyApi].push(id);\n                }\n            });\n        }\n        else {\n            const value = orderModel[keyModel];\n            orderSend[keyApi] = value;\n            if (settings.storage.active)\n                orderStorage[keyApi] = value;\n        }\n    });\n    // Сохранить в локальное хранилище\n    if (settings.storage.active)\n        storage.saveOrder(orderStorage);\n    // ... и отправить заказ\n    apiLarek.sendOrder(orderSend)\n        .then(data => {\n        if (!isEmpty(data.error)) { // Что-то пошло не так\n            showError('Отправка заказа', data.error);\n        }\n        else {\n            events.emit(settings.events.order.sendedOrder, { total: data.total });\n        }\n    })\n        .catch(err => {\n        showError('Отправка заказа', err.message);\n    });\n});\n// Сообщение -> Заказ отправлен\nevents.on(settings.events.order.sendedOrder, (data) => {\n    // ... и очистить корзину\n    basketModel.goods = null;\n    // ... и поблагодарить пользователя за заказ!\n    modalWindow.render({\n        content: orderSuccess.render({\n            total: data.total,\n        }),\n    });\n});\n// Сообщение -> Закрыть окно заказа\nevents.on(settings.events.order.closeOrder, () => {\n    modalWindow.close();\n});\n"],"names":["API_URL","concat","process","CDN_URL","settings","api","goods","order","events","modal","open","close","card","goodsAllChange","cardDetail","cardBasket","basket","changeBasket","goodDelete","makeOrder","changeValueOrder","changeOrder","changeValueContacts","changeContacts","sendedOrder","closeOrder","page","showBasket","keysClose","storage","active","elements","pageContent","listGoods","basketCount","basketButton","modalContainer","modalContent","modalActive","closeButton","templateCatalog","templateDetails","templateBasket","cardBody","buttonDelete","number","category","title","description","image","price","catClass","Map","template","templateList","totalSum","buttonOrder","templatePageOrder","buttonClassActive","defaultPay","buttonCard","buttonCash","inputAddress","errorOrder","templatePageContacts","inputEMail","patternEMail","inputPhone","patternPhone","buttonContacts","errorContacts","templatePageSuccess","buttonSuccess","case","splitNumber","synapse","piece","LarekAPI","_Api","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","getGoods","this","get","sendOrder","post","Api","baseUrl","_a","options","length","undefined","headers","Object","assign","handleResponse","response","ok","json","then","data","Promise","reject","error","statusText","uri","fetch","method","body","JSON","stringify","EventEmitter","_events","on","eventName","callback","has","set","Set","add","off","size","emit","forEach","subscribers","name","RegExp","test","onAll","offAll","trigger","context","_this","event","GoodsModel","_goods","clear","good","id","getGood","setGood","isSelector","x","isEmpty","ensureElement","selectorElement","ensureAllElements","document","Array","from","querySelectorAll","NodeList","isArray","Error","console","warn","pop","HTMLElement","cloneTemplate","query","content","firstElementChild","cloneNode","setElementData","el","dataset","String","createElement","tagName","props","children","obj","prototype","element","getPrototypeOf","_step","_iterator","_createForOfIteratorHelper","s","n","done","child","append","err","e","f","LarekStorage","loadBasket","saveBasket","parse","localStorage","getItem","keyBasket","editDate","setItem","clearBasket","removeItem","loadOrder","keyOrder","saveOrder","clearOrder","showError","message","log","Component","container","toggleClass","className","force","classList","toggle","setText","textContent","setDisabled","state","setAttribute","removeAttribute","setHidden","style","display","setVisible","removeProperty","setImage","src","alt","render","priceToString","choice","stringPrice","toString","replace","text","remains","CardGood","_Component","call","elementCategory","querySelector","elementImage","elementNumber","elementTitle","elementDescription","elementPrice","basketDelete","addEventListener","goodId","_this2","classCategory","Page","galleryCards","elementBasketCount","elementBasketButton","itemsGoods","_this$galleryCards","replaceChildren","_toConsumableArray","BasketModel","_editDate","date","edit","Date","addGood","count","isBasket","deleteGood","getCount","calcTotal","Goods","total","calcGood","Good","OrderModel","_payment","_email","_phone","_address","validation","textError","payment","address","email","phone","Basket","basketSum","goodsEmpty","OrderViewPay","preventDefault","contains","func","changeData","bind","_assertThisInitialized","OrderViewContacts","buttonPay","Modal","keys","_elements","_keys","funcKeyDown","closeWindowKey","_closeButton","_content","stopPropagation","remove","removeEventListener","_get","_getPrototypeOf","findIndex","OrderViewSuccess","totalSumOff","elementModal","cloneBasketList","clonePageOrder","clonePageContacts","clonePageSuccess","apiLarek","goodsModel","basketModel","orderModel","modalWindow","basketView","orderPay","orderContacts","orderSuccess","rebuildBasket","goodsHTMLArray","map","item","countInBasket","basketEmpty","basketList","items","link","basketStorage","tempGoods","orderStorage","goodsList","captionButton","disabledButton","buttonText","buttonDisabled","errorValidation","orderSend","keyModel","keyApi","num","push"],"sourceRoot":""}